rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection rules
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId; // Users can read their own profile
      allow write: if request.auth != null && request.auth.uid == userId && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can write to any user profile, and users can update their own.
    }

    // Announcements collection rules
    match /announcements/{announcementId} {
      // Read access
      allow read: if request.auth != null && (
        resource.data.scope == 'school-wide' ||
        (resource.data.scope == 'staff-only' && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'headteacher')) ||
        (resource.data.scope == 'class-' + request.auth.uid && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher') ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );

      // Create access
      allow create: if request.auth != null && (
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'headteacher' && (request.resource.data.scope == 'school-wide' || request.resource.data.scope == 'staff-only')) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher' && request.resource.data.scope == 'class-' + request.auth.uid && request.resource.data.createdByUserId == request.auth.uid)
      );

      // Update access
      allow update: if request.auth != null && (
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        (resource.data.createdByUserId == request.auth.uid) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'headteacher' && (resource.data.scope == 'school-wide' || resource.data.scope == 'staff-only'))
      );

      // Delete access
      allow delete: if request.auth != null && (
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        (resource.data.createdByUserId == request.auth.uid)
      );
    }

    // Attendance collection rules
    
    // Teachers: Create, Read, Update for their own student classes
    // Headteachers: Read all, Create/Update own teacher attendance, Approve (Update) all student attendance
    // Admins: Read all, Create/Update/Delete all
    match /attendance/{attendanceId} {
      // Helper function to get user's role
      function getUserRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }

      // Read access
      allow read: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher' ||
        (getUserRole() == 'teacher' && resource.data.recordType == 'student' && resource.data.teacherId == request.auth.uid)
      );

      // Create access
      allow create: if request.auth != null && (
        getUserRole() == 'admin' ||
        (getUserRole() == 'headteacher' && request.resource.data.recordType == 'teacher') || // Headteachers can create teacher attendance
        (getUserRole() == 'teacher' && request.resource.data.recordType == 'student' && request.resource.data.teacherId == request.auth.uid)
      );

      // Update access
      allow update: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher' || // Headteachers can update any attendance (e.g., for approval)
        (getUserRole() == 'teacher' && resource.data.recordType == 'student' && resource.data.teacherId == request.auth.uid)
      );

      // Delete access
      allow delete: if request.auth != null && (
        getUserRole() == 'admin'
      );
    }

    // Students collection rules
    match /students/{studentId} {
      // Helper function to get user's role
      function getUserRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }

      // Read access: Teachers for their students, Headteachers and Admins for all
      allow read: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher' ||
        (getUserRole() == 'teacher' && resource.data.teacherId == request.auth.uid)
      );

      // Create access: Teachers for their students, Headteachers and Admins for all
      allow create: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher' ||
        (getUserRole() == 'teacher' && request.resource.data.teacherId == request.auth.uid)
      );

      // Update access: Teachers for their students, Headteachers and Admins for all
      allow update: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher' ||
        (getUserRole() == 'teacher' && resource.data.teacherId == request.auth.uid)
      );

      // Delete access: Teachers for their students, Headteachers and Admins for all
      allow delete: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher' ||
        (getUserRole() == 'teacher' && resource.data.teacherId == request.auth.uid)
      );
    }

    // Academic Events collection rules
    match /academicEvents/{eventId} {
      // Helper function to get user's role
      function getUserRole() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      }

      // Read access for all authenticated users
      allow read: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher' ||
        getUserRole() == 'teacher'
      );

      // Create access for Admin and Headteacher
      allow create: if request.auth != null && (
        getUserRole() == 'admin' ||
        getUserRole() == 'headteacher'
      );

      // Update access for Admin (any event) and Headteacher (their own events)
      allow update: if request.auth != null && (
        getUserRole() == 'admin' ||
        (getUserRole() == 'headteacher' && resource.data.createdByUserId == request.auth.uid)
      );

      // Delete access for Admin only
      allow delete: if request.auth != null && (
        getUserRole() == 'admin'
      );
    }
  }
}
